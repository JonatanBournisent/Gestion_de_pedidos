//---------------------------------------------------------------------------

#include <vcl.h>
#include <ShellApi.hpp>
#pragma hdrstop

#include "uComprobantesX.h"
#include "VariablesGlobales.h"
#include "uSeleccionarCliente.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TfComprobantesX *fComprobantesX;

extern String servidor;
extern String dbName;
extern String userName;
extern String pass;
//---------------------------------------------------------------------------
__fastcall TfComprobantesX::TfComprobantesX(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TfComprobantesX::FormShow(TObject *Sender)
{
   omitir = true;
   Edit1->Clear();
   CDS1->Active = false;
   Query1->Close();
   Query1->SQL->Clear();
   String q;
   q = "SELECT idComprobanteX, fechaEmision, fechaComprobante, refCliente, total, "
	   "(SELECT CONCAT(calle, ' ', numero) FROM clientes WHERE refCliente = idCliente LIMIT 1) AS cliente "

	   "FROM comprobantesX ORDER BY idComprobanteX DESC LIMIT 50";

   Query1->SQL->Add(q);

   Query1->Open();

   if(Query1->IsEmpty())
   {
	  Query1->Close();
	  return;
   }

   CDS1->Active = true;
   MC1->Enabled = true;
   MC2->Enabled = true;
   Button1->Enabled = true;

   ShowScrollBar(DBGrid1->Handle, SB_VERT, true);
}
//---------------------------------------------------------------------------
void __fastcall TfComprobantesX::FormCreate(TObject *Sender)
{
   SQLConnection1->Params->Values["HostName"] = servidor;
   SQLConnection1->Params->Values["Database"] = dbName;
   SQLConnection1->Params->Values["User_Name"] = userName;
   SQLConnection1->Params->Values["Password"] = pass;
}
//---------------------------------------------------------------------------
void __fastcall TfComprobantesX::DBGrid1DrawColumnCell(TObject *Sender, const TRect &Rect,
          int DataCol, TColumn *Column, TGridDrawState State)
{
   if(State.Contains(gdSelected))
   {
	  dynamic_cast <TDBGrid *>(Sender)->Canvas->Font->Color = clWhite;
	  dynamic_cast <TDBGrid *>(Sender)->Canvas->Brush->Color = TColor(0x00C07000);
   }
   else
   {
	  if(dynamic_cast <TDBGrid *>(Sender)->DataSource->DataSet->RecNo % 2)
		 dynamic_cast <TDBGrid *>(Sender)->Canvas->Brush->Color = TColor(0x00D9D9D9);
       else
		 dynamic_cast <TDBGrid *>(Sender)->Canvas->Brush->Color = TColor(0x00F2F2F2);
   }
   dynamic_cast <TDBGrid *>(Sender)->DefaultDrawColumnCell(Rect, DataCol, Column, State);
}
//---------------------------------------------------------------------------
void __fastcall TfComprobantesX::Edit1Change(TObject *Sender)
{
   if(omitir)
   {
	  omitir = false;
	  return;
   }
   if(Edit1->Text.Length() == 0)
   {
       CDS1->Active = false;
	   Query1->Close();
	   Query1->SQL->Clear();
	   String q;
	   q = "SELECT idComprobanteX, fechaEmision, fechaComprobante, refCliente, total, "
		   "(SELECT CONCAT(calle, ' ', numero) FROM clientes WHERE refCliente = idCliente LIMIT 1) AS cliente "

		   "FROM comprobantesX ORDER BY idComprobanteX DESC LIMIT 50";

	   Query1->SQL->Add(q);
	   Query1->Open();

	   if(Query1->IsEmpty())
	   {
		  Query1->Close();
		  return;
	   }

	   CDS1->Active = true;

	   ShowScrollBar(DBGrid1->Handle, SB_VERT, true);

	   MC1->Enabled = true;
	   MC2->Enabled = true;
	   Button1->Enabled = true;

   }
   else
   {
	   CDS1->Active = false;
	   Query1->Close();
	   Query1->SQL->Clear();
	   String q;
	   q = "SELECT idComprobanteX, fechaEmision, fechaComprobante, refCliente, total, "
		   "(SELECT CONCAT(calle, ' ', numero) FROM clientes WHERE refCliente = idCliente LIMIT 1) AS cliente "

		   "FROM comprobantesX WHERE idComprobanteX = :id ORDER BY idComprobanteX DESC LIMIT 50";

	   Query1->SQL->Add(q);
	   Query1->ParamByName("id")->AsInteger = StrToInt(Edit1->Text);

	   Query1->Open();

	   if(Query1->IsEmpty())
	   {
		  Query1->Close();
		  return;
	   }

	   CDS1->Active = true;

	   MC1->Enabled = false;
	   MC2->Enabled = false;
	   Button1->Enabled = false;

	   ShowScrollBar(DBGrid1->Handle, SB_VERT, true);
   }
}
//---------------------------------------------------------------------------
void __fastcall TfComprobantesX::MC1Click(TObject *Sender)
{
   CDS1->Active = false;
   Query1->Close();
   Query1->SQL->Clear();
   String q;
   q = "SELECT idComprobanteX, fechaEmision, fechaComprobante, refCliente, total, "
	   "(SELECT CONCAT(calle, ' ', numero) FROM clientes WHERE refCliente = idCliente LIMIT 1) AS cliente "

	   "FROM comprobantesX WHERE fechaEmision = :fechaEmision ORDER BY idComprobanteX DESC LIMIT 70";

   Query1->SQL->Add(q);
   Query1->ParamByName("fechaEmision")->AsDate = MC1->Date;

   Query1->Open();

   if(Query1->IsEmpty())
   {
	  Query1->Close();
	  return;
   }

   omitir = true;
   Edit1->Clear();
   MC2->Date = Now();
   CDS1->Active = true;

   ShowScrollBar(DBGrid1->Handle, SB_VERT, true);
}
//---------------------------------------------------------------------------
void __fastcall TfComprobantesX::MC2Click(TObject *Sender)
{
   CDS1->Active = false;
   Query1->Close();
   Query1->SQL->Clear();
   String q;
   q = "SELECT idComprobanteX, fechaEmision, fechaComprobante, refCliente, total, "
	   "(SELECT CONCAT(calle, ' ', numero) FROM clientes WHERE refCliente = idCliente LIMIT 1) AS cliente "

	   "FROM comprobantesX WHERE fechaComprobante = :fechaComprobante ORDER BY idComprobanteX DESC LIMIT 70";

   Query1->SQL->Add(q);
   Query1->ParamByName("fechaComprobante")->AsDate = MC2->Date;

   Query1->Open();

   if(Query1->IsEmpty())
   {
	  Query1->Close();
	  return;
   }
   omitir = true;
   Edit1->Clear();
   MC1->Date = Now();

   CDS1->Active = true;

   ShowScrollBar(DBGrid1->Handle, SB_VERT, true);
}
//---------------------------------------------------------------------------
void __fastcall TfComprobantesX::Button1Click(TObject *Sender)
{
   fSeleccionarCliente->llamador = 1;
   fSeleccionarCliente->ShowModal();
   if(fSeleccionarCliente->idSeleccionado <= 2)
	  return;

   CDS1->Active = false;
   Query1->Close();
   Query1->SQL->Clear();
   String q;
   q = "SELECT idComprobanteX, fechaEmision, fechaComprobante, refCliente, total, "
	   "(SELECT CONCAT(calle, ' ', numero) FROM clientes WHERE refCliente = idCliente LIMIT 1) AS cliente "

	   "FROM comprobantesX WHERE refCliente = :refCliente ORDER BY idComprobanteX DESC LIMIT 70";

   Query1->SQL->Add(q);
   Query1->ParamByName("refCliente")->AsInteger = fSeleccionarCliente->idSeleccionado;

   Query1->Open();

   if(Query1->IsEmpty())
   {
	  Query1->Close();
	  return;
   }

   omitir = true;
   Edit1->Clear();
   MC2->Date = Now();
   MC1->Date = Now();

   CDS1->Active = true;

   ShowScrollBar(DBGrid1->Handle, SB_VERT, true);
}
//---------------------------------------------------------------------------
void __fastcall TfComprobantesX::Button2Click(TObject *Sender)
{
   FormShow(Button1);
}
//---------------------------------------------------------------------------
void __fastcall TfComprobantesX::Edit1KeyPress(TObject *Sender, System::WideChar &Key)

{
   if((Key < '0' || Key > '9') && Key != '\b')
      Key = NULL;
}
//---------------------------------------------------------------------------

void __fastcall TfComprobantesX::Button3Click(TObject *Sender)
{
   Close();
}
//---------------------------------------------------------------------------

void __fastcall TfComprobantesX::Button4Click(TObject *Sender)
{
   TIniFile *Configuraciones;
   String Dir = GetCurrentDir() + "//Config.ini";
   Configuraciones = new TIniFile(Dir);
   String path = Configuraciones->ReadString("Directorios","ComprobantesX", "NO_CONFIGURADA");
   delete Configuraciones;

   String nroComp = CDS1->FieldByName("idComprobanteX")->AsString;

   while(nroComp.Length() < 7)
      nroComp = "0" + nroComp;

   path = path + "\\0010 - " + nroComp + ".pdf";


   if (FileExists(path))
   {
	  ShellExecuteA(Handle, "open", AnsiString(path).c_str(), NULL, NULL, SW_SHOWNORMAL);
   }
   else
   {
	  ShowMessage("El archivo que buscamos ya no existe... :(");
   }
}
//---------------------------------------------------------------------------

