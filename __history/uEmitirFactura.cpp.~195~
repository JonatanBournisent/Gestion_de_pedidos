//---------------------------------------------------------------------------

#include <vcl.h>
#include <DateUtils.hpp>
#pragma hdrstop

#include "uEmitirFactura.h"
#include "uSeleccionarCliente.h"
#include "FEAFIPLib_TLB.hpp"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "frxClass"
#pragma link "frxDBSet"
#pragma link "frxBarcode"
#pragma resource "*.dfm"
TfEmitirFactura *fEmitirFactura;
//---------------------------------------------------------------------------
__fastcall TfEmitirFactura::TfEmitirFactura(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TfEmitirFactura::Button1Click(TObject *Sender)
{
   if(refCliente < 2)
      return;

   String q;

//si refCondicionFrenteIVA es = 2 (resp. insc.) entonces hay que hacer factura A, en otro caso B.

//TODO SE HACE ASUMIENDO QUE EL IVA ES SIEMPRE 21%, SI ESTO SE MODIFICA HAY QUE CAMBIAR LA CONSULTA
//PARA OBTENER EL IVA DISCRIMINADO POR CADA PRODUCTO Y ASI CALCULAR EL IVA TOTAL

   if(refCondicionFrenteIVA == 2)
   {
	  q = "SELECT idCliente, razonSocial, domicilioFiscal AS domicilio, REPLACE(cuit,'-','') AS cuit, (SELECT NOW()) AS fecha, (SELECT 21.00) AS alicIVA, "
		  "(SELECT descripcion FROM condicionesFrenteIVA WHERE condicionesFrenteIVA.idCondicionFrenteIVA = clientes.refCondicionFrenteIVA LIMIT 1) AS condFrenteIVA, "
		  "(SELECT SUM(unidades * valorUnidad) / 1.21 AS subtotal FROM cuentas WHERE fecha >= :fini AND fecha <= :ffin AND refCliente = :refCliente) AS subtotal, "
		  "(SELECT SUM(unidades * valorUnidad) * 0.1735537190082645 AS totalIVA FROM cuentas WHERE fecha >= :fini AND fecha <= :ffin AND refCliente = :refCliente) AS totalIVA, "
		  "(SELECT SUM(unidades * valorUnidad) AS total FROM cuentas WHERE fecha >= :fini AND fecha <= :ffin AND refCliente = :refCliente) AS total "
		  "FROM clientes WHERE idCliente = :refCliente LIMIT 1";
   }
   else
   {
      q = "SELECT idCliente, razonSocial, domicilioFiscal AS domicilio, REPLACE(cuit,'-','') AS cuit, (SELECT NOW()) AS fecha, (SELECT 21.00) AS alicIVA, "
		  "(SELECT descripcion FROM condicionesFrenteIVA WHERE condicionesFrenteIVA.idCondicionFrenteIVA = clientes.refCondicionFrenteIVA LIMIT 1) AS condFrenteIVA, "
		  "(SELECT SUM(unidades * valorUnidad) AS subtotal FROM cuentas WHERE fecha >= :fini AND fecha <= :ffin AND refCliente = :refCliente) AS subtotal, "
		  "(SELECT SUM(unidades * valorUnidad) * 0.1735537190082645 AS totalIVA FROM cuentas WHERE fecha >= :fini AND fecha <= :ffin AND refCliente = :refCliente) AS totalIVA, "
		  "(SELECT SUM(unidades * valorUnidad) AS total FROM cuentas WHERE fecha >= :fini AND fecha <= :ffin AND refCliente = :refCliente) AS total "
		  "FROM clientes WHERE idCliente = :refCliente LIMIT 1";
   }
   Query3->Close();
   Query3->SQL->Clear();
   Query3->SQL->Add(q);
   Query3->ParamByName("refCliente")->AsInteger = refCliente;

   if(periodoFacturacion == 3)
   {
	  Query3->ParamByName("fini")->AsDate = StartOfTheMonth(MC->Date);
	  Query3->ParamByName("ffin")->AsDate = MC->Date;
   }
   else if(periodoFacturacion == 2)
   {
	  Query3->ParamByName("fini")->AsDate = StartOfTheWeek(MC->Date);
	  Query3->ParamByName("ffin")->AsDate = MC->Date;
   }
   else if(periodoFacturacion == 1)
   {
	  Query3->ParamByName("fini")->AsDate = MC->Date;
	  Query3->ParamByName("ffin")->AsDate = MC->Date;
   }

   Query3->Open();
   CDS3->Active = true;

   QueryAux->Close();
   QueryAux->SQL->Clear();
   QueryAux->SQL->Add("SELECT montoMaximoFacturableSinDatos FROM registros WHERE idRegistro = 1 LIMIT 1");
   QueryAux->Open();
   float maximoFactSD = QueryAux->FieldByName("montoMaximoFacturableSinDatos")->AsFloat;
   QueryAux->Close();

   if(
		 (CDS3->FieldByName("cuit")->AsString == "00-00000000-0"
	  || CDS3->FieldByName("cuit")->AsString == "00000000000"
	  || CDS3->FieldByName("domicilio")->AsString == "-"
	  || CDS3->FieldByName("domicilio")->AsString == ""
	  || CDS3->FieldByName("razonSocial")->AsString == "-"
	  || CDS3->FieldByName("razonSocial")->AsString == "")
	  && (CDS3->FieldByName("total")->AsFloat > maximoFactSD)
	 )
   {
	  String msg = "Error: para emitir facturas con monto mayor a: " + FormatFloat("$ 0.00", maximoFactSD);
	  msg = msg + " debe completar todos los datos del cliente\nCuit, Domicilio Fiscal y Razón Social o Nombre y Apellido";
	  Application->MessageBox(msg.w_str() ,L"ERROR!",MB_OK | MB_ICONERROR | MB_DEFBUTTON1);
	  return;
   }


   if(refCondicionFrenteIVA == 2)
   {
	  q = "SELECT SUM(cuentas.unidades) AS unidades, "
		  "(SELECT 'Vianda(s)') AS detalle, "
		  "(SELECT (270.00 / 1.21)) AS valorUnidad, "
		  "(SELECT SUM(cuentas.unidades * cuentas.valorUnidad) / 1.21) AS subtotal "
		  "FROM cuentas WHERE fecha >= :fini AND fecha <= :ffin AND refCliente = :refCliente ";
   }
   else
   {
	  q = "SELECT SUM(cuentas.unidades) AS unidades, "
		  "(SELECT 'Vianda(s)') AS detalle, "
		  "(SELECT 270.0) AS valorUnidad, "
		  "(SELECT SUM(cuentas.unidades * cuentas.valorUnidad)) AS subtotal "
		  "FROM cuentas WHERE fecha >= :fini AND fecha <= :ffin AND refCliente = :refCliente ";
   }

   Query2->Close();
   Query2->SQL->Clear();
   Query2->SQL->Add(q);
   Query2->ParamByName("refCliente")->AsInteger = refCliente;

   if(periodoFacturacion == 3)
   {
	  Query2->ParamByName("fini")->AsDate = StartOfTheMonth(MC->Date);
	  Query2->ParamByName("ffin")->AsDate = MC->Date; //EndOfTheMonth(MC->Date);
   }
   else if(periodoFacturacion == 2)
   {
	  Query2->ParamByName("fini")->AsDate = StartOfTheWeek(MC->Date);
	  Query2->ParamByName("ffin")->AsDate = MC->Date; //EndOfTheWeek(MC->Date);
   }

   Query2->Open();
   CDS2->Active = true;

   if(refCondicionFrenteIVA == 2)
   {
	  dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("tipoComp"))->Text = "A";
	  dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("codigoComp"))->Text = "COD. 01";
	  dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("tipoDocumento"))->Text = "FACTURA";

	  dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("Memo16"))->Visible = true;
	  dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("Memo23"))->Visible = true;
	  dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("Memo19"))->Visible = true;
	  dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("Memo18"))->Visible = true;
	  dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("Memo21"))->Visible = true;
	  CDS3subtotal->DisplayFormat = "Subtotal sin IVA: $ 0.00";
   }
   else
   {
	  dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("tipoComp"))->Text = "B";
	  dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("codigoComp"))->Text = "COD. 06";
	  dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("tipoDocumento"))->Text = "FACTURA";
	  dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("Memo16"))->Visible = false;
	  dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("Memo23"))->Visible = false;
	  if(CDS3->FieldByName("cuit")->AsString == "00-00000000-0" || CDS3->FieldByName("cuit")->AsString == "00000000000")
		 dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("Memo19"))->Visible = false;
	  else
	     dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("Memo19"))->Visible = true;

	  if(CDS3->FieldByName("razonSocial")->AsString == "-" || CDS3->FieldByName("razonSocial")->AsString == "")
		 dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("Memo18"))->Visible = false;
	  else
		 dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("Memo18"))->Visible = true;

	  if(CDS3->FieldByName("domicilio")->AsString == "-" || CDS3->FieldByName("domicilio")->AsString == "")
		 dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("Memo21"))->Visible = false;
	  else
		 dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("Memo21"))->Visible = true;

      CDS3subtotal->DisplayFormat = "Subtotal: $ 0.00";
   }


   String tipoComp;

   if(refCondicionFrenteIVA == 2)
	  tipoComp = "A";
   else
      tipoComp = "B";

   String mensaje = "Se va a emitir una factura " + tipoComp + " a nombre de: \n\n" + Label1->Caption + ". ";
   mensaje = mensaje + "\nValor total: " + FormatFloat("$ 0.00", CDS3->FieldByName("total")->AsFloat);
   mensaje  = mensaje  + "\n\nRealmente desea continuar?";


   if(Application->MessageBox(L"Esta operación no puede cancelarse. Desea continuar?" ,L"ATENCIÓN!",MB_YESNO | MB_ICONWARNING | MB_DEFBUTTON2) != IDYES)
   {
	  CDS2->Active = false;
	  CDS3->Active = false;
	  Query2->Close();
	  Query3->Close();
	  return;
   }

   if(Application->MessageBox(mensaje.w_str() ,L"ATENCIÓN!",MB_YESNO | MB_ICONWARNING | MB_DEFBUTTON2) != IDYES)
   {
	  CDS2->Active = false;
	  CDS3->Active = false;
	  Query2->Close();
	  Query3->Close();
	  return;
   }


//**************** CODIGOS SEGUN TABLA DE CODIGOS DE AFIP ************
//	001		FACTURA A                                                *
//	002		NOTA DE DEBITO A                                         *
//	003		NOTA DE CREDITO A                                        *
//                                                                   *
//	006		FACTURA B                                                *
//	007		NOTA DE DEBITO B                                         *
//	008		NOTA DE CREDIT B                                         *
//                                                                   *
//	011		FACTURA C                                                *
//	012		NOTA DE DEBITO C                                         *
//	013		NOTA DE CREDIT C                                         *
//                                                                   *
//	081		TIQUE FACTURA A                                          *
//	082		TIQUE FACTURA B                                          *
//**************** FIN CODIGOS SEGUN TABLA DE CODIGOS DE AFIP ********



//URLs de autenticacion y negocio. Cambiarlas por las de producción al implementarlas en el cliente(abajo)
   //String URLWSAA = "https://wsaahomo.afip.gov.ar/ws/services/LoginCms"; //homologacion
   String URLWSAA = "https://wsaa.afip.gov.ar/ws/services/LoginCms";       //Produccion
   //String URLWSW = "https://wswhomo.afip.gov.ar/wsfev1/service.asmx";     //homologacion
   String URLWSW =  "https://servicios1.afip.gov.ar/wsfev1/service.asmx";   //Produccion

  WideString CAE = "";
  WideString Resultado = "";
  WideString Reproceso = "";
  WideString Vencimiento = "";
  double nro = 0;
  int PtoVta = 6;
  int TipoComp = 6;
  String FechaComp = FormatDateTime("yyyyMMdd", Now());

   Twsfev1 *lwsfev1;
   lwsfev1 = new Twsfev1(Owner);
   // = new Twsfev1();
   lwsfev1->CUIT = 20149650939i64;
   lwsfev1->URL = URLWSW;

   bool comprobanteAutorizado = false;

   //ShowMessage(lwsfev1->ErrorDesc);
	if (lwsfev1->login("certificado.crt", "clave.key", URLWSAA))
	{
		if (lwsfev1->SFRecuperaLastCMP(PtoVta, TipoComp) == false)
		{
		   ShowMessage(lwsfev1->ErrorDesc);
		}

		else
		{
			//nro = lwsfev1->SFLastCMP;
			//ShowMessage("Ultimo comprobante B autorizado: " +  IntToStr(int(nro)));

			nro = lwsfev1->SFLastCMP + 1;
			lwsfev1->Reset();
			if(refCondicionFrenteIVA == 3 && CDS3->FieldByName("cuit")->AsString == "00000000000")
			   lwsfev1->AgregaFactura(1, 96, __int64(0), nro, nro, FechaComp, 1.21, 0, 1, 0, "", "", "", "PES", 1);
			else
			   lwsfev1->AgregaFactura(1, 80, 23323762589i64, nro, nro, FechaComp, 1.21, 0, 1, 0, "", "", "", "PES", 1);
			lwsfev1->AgregaIVA(5, 1, 0.21); //ir a http://www.bitingenieria.com.ar/codigos.html
			if (lwsfev1->Autorizar(PtoVta, (int) tcFacturaA))
			{
				lwsfev1->AutorizarRespuesta(0, CAE, Vencimiento, Resultado, Reproceso);
				if (Resultado == "A")
				{
					//ShowMessage("Felicitaciones! Si ve este mensaje instalo correctamente FEAFIP. CAE y Vencimiento :" + CAE + " " + Vencimiento);
					comprobanteAutorizado = true;
				}
				else
				{
					WideString temp;
					ShowMessage(lwsfev1->AutorizarRespuestaObs(0));
				}
			}
			else
			{
				ShowMessage(lwsfev1->ErrorDesc);
			}
		}
	}

	else
	{
		ShowMessage(lwsfev1->ErrorDesc);
	}









//GENERACION DE CARACTERES PARA CODIGO DE BARRA

   //String cae = CAE;
   //String vtoCae = "20190110";	//fecha vencimiento cae

   //int ptoVenta = 6;
   //int nroComprobante = 12345;

   String ptoDeVenta = IntToStr(PtoVta);
   while(ptoDeVenta.Length() < 5)
	  ptoDeVenta.Insert("0",1);

   String nroComp = IntToStr(__int64(nro));
   while(nroComp.Length() < 8)
      nroComp.Insert("0",1);

   String codigoBarra = "20149650939"; //cuit vendedor

   if(refCondicionFrenteIVA == 2)
	  codigoBarra = codigoBarra + "001"; //codigo factura A
   else
	  codigoBarra = codigoBarra + "006"; //codigo factura B

   codigoBarra = codigoBarra + ptoDeVenta + CAE + Vencimiento;

//FIN GENERACION DE CARACTERES PARA CODIGO DE BARRA


   if(comprobanteAutorizado)
   {
	  dynamic_cast <TfrxBarCodeView *> (fEmitirFactura->frxReport3->FindObject("BarCode1"))->Text = codigoBarra;
	  dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("caeComp"))->Text = "N° de CAE: " + CAE;
	  dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("nroComp"))->Text = ptoDeVenta + " - " + nroComp;
	  dynamic_cast <TfrxMemoView *> (fEmitirFactura->frxReport3->FindObject("vencComp"))->Text = "Fecha de Vto. de CAE: " + Vencimiento;
	  frxReport3->PrepareReport(true);
	  frxReport3->ShowReport(true);
   }
   else
      ShowMessage("El comprobante no fue autorizado");


   CDS2->Active = false;
   CDS3->Active = false;
   Query2->Close();
   Query3->Close();


   delete lwsfev1;
}
//---------------------------------------------------------------------------

void __fastcall TfEmitirFactura::FormShow(TObject *Sender)
{
   MC->Date = Now();
   Label1->Caption = "";
   refCliente = 0;
}
//---------------------------------------------------------------------------





void __fastcall TfEmitirFactura::Button2Click(TObject *Sender)
{
   fSeleccionarCliente->llamador = 1;
	  fSeleccionarCliente->ShowModal();

   if(fSeleccionarCliente->idSeleccionado < 2)
   {
	  Label1->Caption = "Seleccionar Cliente";
	  Button1->Enabled = false;
	  return;
   }
   Button1->Enabled = true;
   refCliente = fSeleccionarCliente->idSeleccionado;





   QueryAux->Close();
   QueryAux->SQL->Clear();
   QueryAux->SQL->Add("SELECT refCondicionFrenteIVA, refFrecuenciaPago, razonSocial FROM clientes WHERE clientes.idCliente = :refCliente LIMIT 1");
   QueryAux->ParamByName("refCliente")->AsInteger = refCliente;
   QueryAux->Open();
   refCondicionFrenteIVA = QueryAux->FieldByName("refCondicionFrenteIVA")->AsInteger;
   periodoFacturacion = QueryAux->FieldByName("refFrecuenciaPago")->AsInteger; //mensual //2 semanal // 1 diario
   Label1->Caption = QueryAux->FieldByName("razonSocial")->AsString;
   QueryAux->Close();

   RG1->ItemIndex = periodoFacturacion - 1;
}
//---------------------------------------------------------------------------

void __fastcall TfEmitirFactura::RG1Click(TObject *Sender)
{
   periodoFacturacion = RG1->ItemIndex + 1;
}
//---------------------------------------------------------------------------

